# -*- coding: utf-8 -*-
"""Trabalho de sep 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nAa_UR1cJSfGKC7gRZvSnT9MHDQq023B

Este código foi criado para uma atividade proposta para a disciplina de sistemas elétricos de potencia 2 da UFPR.
Ele calcula as matrizes Admitância, condutancia e susceptancia barra e a matriz B', a partir de três matrizes, a matriz de resistencia,
a matriz reatancia e a matriz tap, sendo que elas abrigamos respectivos valores das grandezas entre as barras I e J nos elementos I J
e as grandezas shunt nos elementos I I

Esta primeira parte do codigo recebe as informações da rede, como numero de barras, resistencia, reatancia e tap entre as barras

"""

import numpy as np
import pandas as pd
import cmath 
 
 
# entrada de dados
 
numero_de_barras = 14     
 
matriz_resistencia=np.zeros((numero_de_barras,numero_de_barras))    #recebe os valores das resistencias entre as barras ij e as resistencias shunts na barra ii, tudo em PU
 
 
matriz_resistencia[0][1]=1.938/100                                  #resistencias entre as barras
matriz_resistencia[0][4]=5.403/100
matriz_resistencia[1][2]=4.699/100
matriz_resistencia[1][3]=5.811/100
matriz_resistencia[1][4]=5.695/100
matriz_resistencia[2][3]=6.701/100
matriz_resistencia[3][4]=1.335/100
matriz_resistencia[3][6]=0
matriz_resistencia[3][8]=0
matriz_resistencia[4][5]=0
matriz_resistencia[5][10]=9.498/100
matriz_resistencia[5][11]=12.291/100
matriz_resistencia[5][12]=6.615/100
matriz_resistencia[6][7]=0
matriz_resistencia[6][8]=0
matriz_resistencia[8][9]=3.181/100
matriz_resistencia[8][13]=12.711/100
matriz_resistencia[9][10]=8.205/100
matriz_resistencia[11][12]=22.092/100
matriz_resistencia[12][13]=17.093/100
 
 
 
matriz_reatancia=np.zeros((numero_de_barras,numero_de_barras)) 
 
 
matriz_reatancia[0][1]=5.917/100
matriz_reatancia[0][4]=22.304/100
matriz_reatancia[1][2]=19.797/100
matriz_reatancia[1][3]=17.632/100
matriz_reatancia[1][4]=17.338/100
matriz_reatancia[2][3]=17.103/100
matriz_reatancia[3][4]=4.211/100
matriz_reatancia[3][6]=20.912/100
matriz_reatancia[3][8]=55.618/100
matriz_reatancia[4][5]=25.202/100
matriz_reatancia[5][10]=19.890/100
matriz_reatancia[5][11]=25.581/100
matriz_reatancia[5][12]=13.027/100
matriz_reatancia[6][7]=17.615/100
matriz_reatancia[6][8]=11.001/100
matriz_reatancia[8][9]=8.45/100
matriz_reatancia[8][13]=27.038/100
matriz_reatancia[9][10]=19.207/100
matriz_reatancia[11][12]=19.998/100
matriz_reatancia[12][13]=34.802/100
 
matriz_reatancia[8][8]=1/0.19                                   # reatancia shunt
 
matriz_tap=np.ones((numero_de_barras,numero_de_barras))   
 
matriz_tap[2][5]=0.978
matriz_tap[2][7]=0.969
matriz_tap[3][4]=0.932

"""agora vamos criar as matrizes condutancia e susceptancia e admitancia, estas matrizes abrigam as condutancias, susceptancias e admitancias entre as barras i e j, e os elementos shunts nas diagonais


lembrando de divisão de complexos:
1/(a+jb) = a-jb/(a²+b²)  = c+jd = a/a²+b²-jb/a²+b²


"""

matriz_condutancia=np.zeros((numero_de_barras,numero_de_barras))
 
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    if matriz_resistencia[i][j]!=0 and matriz_reatancia[i][j] !=0:
        matriz_condutancia[i][j]=((matriz_resistencia[i][j])/((matriz_resistencia[i][j]*matriz_resistencia[i][j])+(matriz_reatancia[i][j]*matriz_reatancia[i][j])))
        matriz_condutancia[j][i]=matriz_condutancia[i][j]
 
 
matriz_susceptancia=np.zeros((numero_de_barras,numero_de_barras))
 
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    if matriz_resistencia[i][j]!=0 and matriz_reatancia[i][j] !=0:
        matriz_susceptancia[i][j]=-((matriz_reatancia[i][j])/((matriz_resistencia[i][j]*matriz_resistencia[i][j])+(matriz_reatancia[i][j]*matriz_reatancia[i][j])))
        matriz_susceptancia[j][i]=matriz_susceptancia[i][j]
 
 
matriz_admitancia=np.zeros((numero_de_barras,numero_de_barras), dtype=np.complex)
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
   matriz_admitancia[i][j]= complex(matriz_condutancia[i][j], matriz_susceptancia[i][j])
 
print("Matriz_admitancia:")
print(pd.DataFrame(matriz_admitancia))
 
 
print("\nMatriz condutancia:")
print(pd.DataFrame(matriz_condutancia))
 
 
print("\nMatriz susceptancia:")
print(pd.DataFrame(matriz_susceptancia))

"""Agora vamos criar as matrizes barras"""

matriz_admitancia_barra=np.zeros((numero_de_barras,numero_de_barras),dtype=np.complex)
 
for i in range(numero_de_barras):
  for j in range (numero_de_barras):
    if i==j:
      for k in range (numero_de_barras):
        matriz_admitancia_barra[i][j]=matriz_admitancia_barra[i][j]+(matriz_admitancia[i][k]*(matriz_tap[i][k]*matriz_tap[i][k]))
    else:
      matriz_admitancia_barra[i][j]= -matriz_tap[i][j]*matriz_admitancia[i][j] 
print("matriz_admitancia_barra\n")
print(pd.DataFrame(matriz_admitancia_barra))
 

matriz_condutancia_barra=np.zeros((numero_de_barras,numero_de_barras))
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    matriz_condutancia_barra[i][j]=matriz_admitancia_barra[i][j].real
print("\nmatriz_condutancia_barra\n")
print(pd.DataFrame(matriz_condutancia_barra))
 
matriz_susceptancia_barra=np.zeros((numero_de_barras,numero_de_barras))
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    matriz_susceptancia_barra[i][j]=matriz_admitancia_barra[i][j].imag
 
print("\nmatriz_susceptancia_barra\n")
print(pd.DataFrame(matriz_susceptancia_barra))

"""Matrizes escritas em linha:"""

print("matriz_admitancia_barra\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," ",matriz_admitancia_barra[i][j]) 


print("\nmatriz_condutancia_barra\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," ",matriz_condutancia_barra[i][j]) 


print("\nmatriz_susceptancia_barra\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," ",matriz_susceptancia_barra[i][j])

"""Nesta parte do codigo vamos criar a matriz B'

ela é uma matriz Bbarra sem shunt
"""

matriz_blinha=np.zeros((numero_de_barras,numero_de_barras))
 
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    if i!=j and matriz_reatancia[i][j]!=0:
      matriz_blinha[i][j]=-1/matriz_reatancia[i][j]
      matriz_blinha[j][i]=matriz_blinha[i][j]
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    if i==j:
      for k in range(numero_de_barras):
        if k !=i:
          matriz_blinha[i][j]=matriz_blinha[i][j]-matriz_blinha[i][k]    
 
print("Matriz_reatancia")
print(pd.DataFrame(matriz_reatancia))
 
print("\nmatriz B': ")
print(pd.DataFrame(matriz_blinha))

print("\nMatriz B' escrita em linha:\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," "," ",matriz_blinha[i][j])

"""PARTE 2 - FP linearizado

No FP linearizado, encontramos o FP fazendo dois passos.

 Primeiro encontramos o vetor de angulos nas barras a partir das potencias injetadas e consumidas com a equação matricial $Pk=B'* \theta k$:

Depois com os angulos das barras fazemos $Pkm=\frac{\theta k-\theta m}{Xkm}$

"""

vetor_injeção=np.zeros(numero_de_barras)                       #injeção de pot ativa = geração-carga
vetor_injeção[0]=114.17/100
vetor_injeção[1]=(40-21.7)/100
vetor_injeção[2]=-94.2
vetor_injeção[3]=-47.8
vetor_injeção[4]=-7.6
vetor_injeção[5]=-11.2
vetor_injeção[6]=0
vetor_injeção[7]=0
vetor_injeção[8]=-29.5
vetor_injeção[9]=-9
vetor_injeção[10]=-3.5
vetor_injeção[11]=-6.1
vetor_injeção[12]=-13.8
vetor_injeção[13]=-14.9
 
 
maior_injecao=0                           #descobre qual barra de referencia      
for i in range(numero_de_barras):
    if vetor_injeção[i]>maior_injecao:
      maior_injecao=vetor_injeção[i]
      barra_de_referencia=i
 
      
 
matriz_reduzida=np.delete(np.delete(matriz_blinha,barra_de_referencia,0),barra_de_referencia,1)      #deletando linha e coluna da barra de referencia
 
 
 
vetor_injecao_reduzido=np.delete(vetor_injeção,barra_de_referencia)     #remove a injeção da barra de referencia
 
 
 
matriz_reduzida_inversa=np.linalg.inv(matriz_reduzida)                  #inverte a matriz
 
vetor_angulos_reduzido=np.zeros(numero_de_barras-1)                             #cria o vetor de angulos reduzido
vetor_angulos_reduzido=np.dot(vetor_injecao_reduzido,matriz_reduzida_inversa)     #calcula o vetor de angulos reduzido
vetor_angulos=np.zeros(numero_de_barras)                                            
 
 
'''vetor_angulos=np.resize(vetor_angulos,numero_de_barras)
vetor_angulos[barra_de_referencia]=0'''
 
for i in range(numero_de_barras-1):                                             #cria o vetor de angulos, colocando o angulo 0 na posição de referencia
  if i<barra_de_referencia:
    vetor_angulos[i]=vetor_angulos_reduzido[i]
  elif i==barra_de_referencia:
    vetor_angulos[i]=0
    vetor_angulos[i+1]=vetor_angulos_reduzido[i]
  elif i>barra_de_referencia:
    vetor_angulos[i+1]=vetor_angulos_reduzido[i]
    
  
print("a barra de referencia eh a",barra_de_referencia)   
 
print("\nvetor injecoes\n")
print(pd.DataFrame(vetor_injeção))
 
print('vetor injecao reduzido')
print(pd.DataFrame(vetor_injecao_reduzido))
 
print("matriz b'")
print(pd.DataFrame(matriz_blinha))
 
print("matriz_reduzida")
print(pd.DataFrame(matriz_reduzida))
 
print("\nvetor_angulos_reduzido\n") 
print(pd.DataFrame(vetor_angulos_reduzido)) 
 
print("\nvetor_angulos\n") 
print(pd.DataFrame(vetor_angulos))

"""
Agora que temos o vetor de angulos vamos calcular os fluxos de potenica

"""

matriz_fp=np.zeros((numero_de_barras,numero_de_barras))
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    matriz_fp[i][j]=-(vetor_angulos[i]-vetor_angulos[j])*matriz_blinha[i][j]          # faz o calculo teta1-teta2/reatancia
    if (i!=j and matriz_fp[i][j]>0):
      print("fluxo da barra",i," para a barra ",j,": ", matriz_fp[i][j],"PU")

"""Matrizes escritas linearmente:

"""

print("matriz_admitancia_barra\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," ",matriz_admitancia_barra[i][j]) 


print("\nmatriz_condutancia_barra\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," ",matriz_condutancia_barra[i][j]) 


print("\nmatriz_susceptancia_barra\n")
for i in range(numero_de_barras):
  for j in range(numero_de_barras):
    print(i," ",j," ",matriz_susceptancia_barra[i][j])
